

#include "spi_driver.h"

/*********************************************************************
 * @fn      				  - SPI_PeriClockControl
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -
 */

 void SPI_PeriClockControl ( SPI_RegDef_t * pSPIx, uint8_t EnorDi )
 {
		if(EnorDi == ENABLE)
	{
		if(pSPIx == SPI1)
		{
			SPI1_PLCK_EN();
		}else if (pSPIx == SPI2)
		{
			SPI2_PCLK_EN();
		}else if (pSPIx == SPI3)
		{
			SPI3_PCLK_EN();
		}
	}
	else
	{
		if(pSPIx == SPI1)
		{
			SPI1_PLCK_DI();
		}else if (pSPIx == SPI2)
		{
			SPI2_PCLK_DI();
		}else if (pSPIx == SPI3)
		{
			SPI3_PCLK_DI();
		}
	}
 }

/*********************************************************************
 * @fn      				  - SPI_Init
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -
 */


void SPI_Init ( SPI_Handle_t *pSPIHandle )
{

		//Enabling clock of SPI peripheral
		SPI_PeriClockControl ( pSPIHandle->pSPIx, ENABLE ) ;

		//Configuring SPI_CR1 register
		uint32_t temp = 0;												//we need not clear the bits everytime because we are starting with temp = 0

		//1. Configuring Device Mode
		temp |= ( pSPIHandle->SPIConfig.SPI_DeviceMode << 2 ) ;

		//2. Configuring Bus Configuration
		if ( pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD )
		{
			//full duplex
			temp |= ( 1 << SPI_CR1_BIDIMODE ) ;
		}
		else if ( pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD )
		{
			//half duplex
			temp &= ~( 1 << SPI_CR1_BIDIMODE ) ;
		}
		else if ( pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY )
		{
			//Simplex RXONLY
				temp &= ~ ( 1 << SPI_CR1_BIDIMODE ) ;			//BIDI mode should be cleared first
				temp |= ( 1 << SPI_CR1_RXONLY ) ;
		}

		//3. Configure the spi serial clock speed (baud rate)
		temp |= ( pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR ) ;

		//4.  Configure the DFF
		temp |= ( pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF ) ;

		//5. configure the CPOL
		temp |= ( pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL ) ;

		//6. configure the CPHA
		temp |= ( pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA ) ;

		//7. configure the SSM
		temp |= ( pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM ) ;

		pSPIHandle->pSPIx->CR1 |= temp;

}


/*********************************************************************
 * @fn      				  - SPI_DeInit
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -
 */

void SPI_DeInit ( SPI_RegDef_t * pSPIx )
{
		if ( pSPIx == SPI1 )
		{
				RCC->APB2RSTR |= ( 1 << 12 );
				RCC->APB2RSTR &= ~( 1 << 12 );
		}
		else if ( pSPIx == SPI2 )
		{
				RCC->APB2RSTR |= ( 1 << 14 );
				RCC->APB2RSTR &= ~( 1 << 14 );
		}
		else if ( pSPIx == SPI3 )
		{
				RCC->APB2RSTR |= ( 1 << 15 );
				RCC->APB2RSTR &= ~( 1 << 15 );
		}
		else if ( pSPIx == SPI4 )
		{
				RCC->APB2RSTR |= ( 1 << 13 );
				RCC->APB2RSTR &= ~( 1 << 13 );
		}
}



/*********************************************************************
 * @fn      				  - SPI_GetFlagStatus
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -
 */


uint8_t SPI_GetFlagStatus ( SPI_RegDef_t *pSPIx , uint32_t FlagName )											//Flag name is the masking detail of that particular flag, eg. ( 1 << 1 ) for TXE flag
{
	if(pSPIx->SR & FlagName)							//if this is true then it means that, that particular flag is set.
	{
		return FLAG_SET;
	}
	return FLAG_RESET;
}


/*********************************************************************
 * @fn      				  - SPI_SendData
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         - *pTxBuffer is pointer to data which is to be sent, not the Transmit buffer which is there in SPI block
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              - This is a Blocking call, so until all bytes are not transmitted this function will not finish
 */

void SPI_SendData ( SPI_RegDef_t * pSPIx, uint8_t * pTxBuffer, uint32_t Len )									//Blocking send API, because the function call will wait until all the bytes are transmitted.
{
		while ( Len > 0 )
		{
				//1. Wait until TX Buffer is empty, ie TX is set
				//while ( !(pSPIx->SR & ( 1 << 1 )) );
				while ( SPI_GetFlagStatus ( pSPIx, SPI_TXE_FLAG )  == FLAG_RESET );														//polling TX flag

				if ( pSPIx->CR1 & ( 1 << SPI_CR1_DFF ) )
				{
					  // 16 bit DFF
						// 1. Load the data into DR
					  	pSPIx->DR = * (( uint16_t * )pTxBuffer) ;																			//type casting is done to make pTXBuffer pointer of 16 bit, after this DR will get 16 bit data
						Len --;
						Len --;
						pTxBuffer ++ ;
						pTxBuffer ++ ;
				}
				else																													// 8 bit
				{
					  // 8 bit DFF
						pSPIx->DR = * pTxBuffer ;
						Len -- ;
						pTxBuffer ++ ;
				}
		}
}


/*********************************************************************
 * @fn      				  - SPI_ReceiveData
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -
 */

void SPI_ReceiveData ( SPI_RegDef_t * pSPIx, uint8_t * pRxBuffer, uint32_t Len )
{
		while ( Len > 0 )
		{
				while ( SPI_GetFlagStatus ( pSPIx, SPI_RXNE_FLAG ) == FLAG_SET );						//wait until Rx Buffer is not empty

				if ( pSPIx->CR1 & ( 1 << SPI_CR1_DFF ) )
				{
						//16 bit DFF
						//1. load the data from DR to Rx buffer address
						*( uint16_t * )pRxBuffer = pSPIx->DR;
						Len --;
						Len --;
					    pRxBuffer ++;
						pRxBuffer ++;
				}
				else
				{
						//8 bit DFF
						*pRxBuffer = pSPIx->DR;
						Len --;
						pRxBuffer ++;
				}
		}
}



/*********************************************************************
 * @fn      				  - SPI_PeripheralControl
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         - *pTxBuffer is pointer to data which is to be sent
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              - This is a Blocking call, so untill all bytes are not trasmitted this function will not finish
 */


void SPI_PeripheralControl ( SPI_RegDef_t * pSPIx, uint8_t ENorDi  )
{
		if ( ENorDi == ENABLE )
		{
			pSPIx->CR1 |= ( 1 << SPI_CR1_SPE );
		}
		else
		{
			pSPIx->CR1 &= ~( 1 << SPI_CR1_SPE );
		}
}

/*********************************************************************
 * @fn      				  - SPI_SSIConfig
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         - *pTxBuffer is pointer to data which is to be sent
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              - This is a Blocking call, so untill all bytes are not trasmitted this function will not finish
 */


void SPI_SSIConfig ( SPI_RegDef_t * pSPIx, uint8_t ENorDi )
{
		if ( ENorDi == ENABLE )
		{
				pSPIx->CR1 |= ( 1 << SPI_CR1_SSI ) ;
		}
		else
		{
				pSPIx->CR1 &= ~( 1 << SPI_CR1_SSI ) ;
		}
}



/*********************************************************************
 * @fn      		  - SPI_SSOEConfig
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -
 */


void SPI_SSOEConfig ( SPI_RegDef_t * pSPIx, uint8_t ENorDi )
{
		if ( ENorDi == ENABLE )
		{
				pSPIx->CR2 |= ( 1 << SPI_CR2_SSOE ) ;
		}
		else
		{
				pSPIx->CR2 &= ~( 1 << SPI_CR2_SSOE ) ;
		}
}


/*********************************************************************
 * @fn      		  - SPI_InterruptConfig
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              - This API will be same for every peripheral, because it has nothing to do with peripheral, it just need irq number, and it will enable or disable it whatever peripheral is connected to NVIC at that position
 */

void SPI_InterruptConfig( uint32_t IRQNumber, uint8_t EnorDi )						//used to configure IRQ number like enabling it, disabling in processor side ie in NVIC block.
{
		//configuring NVIC related registers, or configuring processor registers
		if( EnorDi == ENABLE )
		{
			if ( IRQNumber <= 31 )
			{
					//program ISER0 register
					*NVIC_ISER0 |= ( 1 << IRQNumber ) ;								//Interrupt set Eable register
			}
			else if ( IRQNumber >= 32 && IRQNumber <= 63 )
			{
					//program ISER1 register
				  *NVIC_ISER1 |= ( 1 << IRQNumber%32 ) ;									// %32 is make 32 - 63 in the range of 0 - 31
			}
			else if ( IRQNumber >= 64 && IRQNumber <= 95 )
			{
					//program ISER2 register
			  		*NVIC_ISER2 |= ( 1 << IRQNumber%64 ) ;									// %64 is make 64 - 95 in the range of 0 - 31
			}
		}
		else if( EnorDi == DISABLE )
		{
			if ( IRQNumber <= 31 )
			{
					//program ISER0 register
					*NVIC_ICER0 |= ( 1 << IRQNumber ) ;								//Interrupt clear Eable register
			}
			else if ( IRQNumber >= 32 && IRQNumber <= 63 )
			{
					//program ISER1 register
				  *NVIC_ICER1 |= ( 1 << IRQNumber%32 ) ;									// %32 is make 32 - 63 in the range of 0 - 31
			}
			else if ( IRQNumber >= 64 && IRQNumber <= 95 )
			{
					//program ISER2 register
			  	*NVIC_ICER2 |= ( 1 << IRQNumber%64 ) ;									// %64 is make 64 - 95 in the range of 0 - 31
			}
		}
}


/*********************************************************************
 * @fn      		  - SPI_IRQPriorityConfig
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -This API will be same for every peripheral, because it has nothing to do with peripheral, it just need irq number, and priority and it will change it, whatever peripheral is connected to NVIC at that position
 */

void SPI_IRQPriorityConfig( uint8_t IRQNumber, uint32_t IRQPriority )
{
		uint8_t reg_number = IRQPriority / 4 ;																	// it tells in which NVIC Priority register we have to use
		uint8_t reg_section = IRQPriority % 4 ; 																// it tells which in bit of a NVIC Priority register we have to use

		uint8_t shifting_amount = 8 * reg_section + ( 8 - NO_PR_BITS_IMPLEMENTED ) ;
		*( NVIC_IPR_BASEADDR + reg_number ) |= ( IRQPriority << shifting_amount ) ;					//lower 4 bits are not implemented in each and every field of this register, therefore we have shift by additional 4 amount
																																												//note: above
}


/*********************************************************************
 * @fn      		  - SPI_SendDataIT
 *
 * @brief             - non blocking API
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              - from here onwards Handle structure will be changed, there will be more fields other then SPI_RegDef_t (base address), SPI_Config_t SPIConfig (configuration data member),
 *                      This is done, ie these member variable will store the state of SPI, and later it will be used by ISR while sending data.
 */

void SPI_SendDataIT ( SPI_Handle_t *pSPIHandle, uint8_t *pTxBuffer, uint32_t Len )
{
	//1 . Save the Tx buffer address and Len information in some global variables

	//2.  Mark the SPI state as busy in transmission so that
	//    no other code can take over same SPI peripheral until transmission is over

	//3. Enable the TXEIE control bit to get an interrupt whenever TXE flag is set in SR

	/*4. Note: This APi is not writing data (ie is not transmitting data) into Data Registe, Data Transmission will
	be handled by the ISR Handler. This API just saves the required information (like len, tx buffer, SPI state etc) in global variables
	and enables the TXE interrupt by enabling TXEIE control bit and after that it just returns.
	Instead of global variables we have created new fields in handle structure to store SPI state and other information.
	*/

}

/*********************************************************************
 * @fn      		  - SPI_ReceiveDataIT
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -
 */

void SPI_ReceiveDataIT ( SPI_Handle_t *pSPIHandle, uint8_t *pRxBuffer, uint32_t Len )
{
	//1 . Save the Rx buffer address and Len information in some global variables


	//2.  Mark the SPI state as busy in reception so that
	//    no other code can take over same SPI peripheral until reception is over

	//3. Enable the RXNEIE control bit to get interrupt whenever RXNEIE flag is set in SR





}


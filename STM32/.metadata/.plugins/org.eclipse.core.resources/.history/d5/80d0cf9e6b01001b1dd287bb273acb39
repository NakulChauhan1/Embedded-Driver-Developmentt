

#ifndef __SPI_DRIVER_H
#define __SPI_DRIVER_H

#include "stm32f4xx.h"





/*
 *  Configuration structure for SPIx peripheral
 */

typedef struct
{
	uint32_t SPI_DeviceMode;
	uint32_t SPI_BusConfig;
	uint32_t SPI_SclkSpeed;
	uint32_t SPI_DFF;
	uint32_t SPI_CPOL;
	uint32_t SPI_CPHA;
	uint32_t SPI_SSM;
}SPI_Config_t;


/*
 *Handle structure for SPIx peripheral
 */

typedef struct
{
		SPI_RegDef_t 	* pSPIx;					/*!< This holds the base address of SPIx(x:0,1,2) peripheral >*/
		SPI_Config_t 	SPIConfig;
		uint8_t 		*pTxBuffer; 				/* !< To store the app. Tx buffer address > */
		uint8_t 		*pRxBuffer;					/* !< To store the app. Rx buffer address > */
		uint32_t 		TxLen;						/* !< To store Tx len > */
		uint32_t 		RxLen;						/* !< To store Rx len > */
		uint8_t 		TxState;					/* !< To store Tx state > */
		uint8_t 		RxState;					/* !< To store Rx state > */
}SPI_Handle_t;

//last 6 members are for interrupt based API, it helps while code is executing in ISR.

/*
 * SPI application states
 */

#define SPI_READY 																0
#define SPI_BUSY_IN_RX 															1
#define SPI_BUSY_IN_TX 															2


/*
 *	@SPI Device Mode
 */

#define SPI_DEVICE_MODE_MASTER 													1
#define SPI_DEVICE_MODE_SLAVE 													0


/*
 *	@SPI BusConfig
 */

#define SPI_BUS_CONFIG_FD														1
#define SPI_BUS_CONFIG_HD														2
//#define SPI_BUS_CONFIG_SIMPLEX_TXONLY											3		   			//it is full duplex only with MISO line disconnected
#define SPI_BUS_CONFIG_SIMPLEX_RXONLY											3


/*
 *	@SPI Sckl Speed
 */

#define SPI_SCLK_SPEED_DIV2														0
#define SPI_SCLK_SPEED_DIV4														1
#define SPI_SCLK_SPEED_DIV8														2
#define SPI_SCLK_SPEED_DIV16													3
#define SPI_SCLK_SPEED_DIV32													4
#define SPI_SCLK_SPEED_DIV64													5
#define SPI_SCLK_SPEED_DIV128													6
#define SPI_SCLK_SPEED_DIV256													7



/*
 *	@SPI Data Frame Format
 */

#define SPI_DFF_8BITS															0
#define SPI_DFF_16BITS															1

/*
 *	@SPI Clock Polarity
 */

#define SPI_CPOL_HIGH															1
#define SPI_CPOL_LOW															0

/*
 *	@SPI Clock Phase
 */

#define SPI_CPHA_HIGH															1
#define SPI_CPHA_LOW															0

/*
 *	@SPI Slave Select Management
 */

#define SPI_SSM_EN																1
#define SPI_SSM_DI																0


/*
 *	@SPI related status flags definitions ( Masking details of various flags )
 */

#define	SPI_TXE_FLAG															( 1 << SPI_SR_TXE )
#define	SPI_RXNE_FLAG															( 1 << SPI_SR_RXNE )
#define	SPI_CHSIDE_FLAG															( 1 << SPI_SR_CHSIDE )
#define	SPI_UDR_FLAG															( 1 << SPI_SR_UDR )
#define	SPI_BSY_FLAG															( 1 << SPI_SR_BSY )
#define	SPI_OVR_FLAG															( 1 << SPI_SR_OVR )
#define	SPI_FRE_FLAG															( 1 << SPI_SR_FRE )
#define	SPI_CRCERR_FLAG															( 1 << SPI_SR_BSY )








/******************************************************************************************
 *								APIs supported by this driver
 *		 For more information about the APIs check the function definitions
 ******************************************************************************************/

/*
 * Peripheral Clock setup
 */

 void SPI_PeriClockControl ( SPI_RegDef_t * pSPIx, uint8_t EnorDi );


/*
 * Init or Deinit
 */
 void SPI_Init ( SPI_Handle_t *pSPIHandle );
 void SPI_DeInit ( SPI_RegDef_t * pSPIx );


/*
 * Data Receive and
 */
 void SPI_SendData ( SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len );
 void SPI_ReceiveData ( SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t Len );
 void SPI_SendDataIT ( SPI_Handle_t *pSPIHandle, uint8_t *pTxBuffer, uint32_t Len );
 void SPI_ReceiveDataIT ( SPI_Handle_t *pSPIHandle, uint8_t *pRxBuffer, uint32_t Len );

uint8_t SPI_GetFlagStatus ( SPI_RegDef_t *pSPIx , uint32_t FlagName );

/*
 * Other peripheral Control APIs
 *
 */
 void SPI_PeripheralControl ( SPI_RegDef_t * pSPIx, uint8_t ENorDi  ) ;
 void SPI_SSIConfig ( SPI_RegDef_t * pSPIx, uint8_t ENorDi );
 void SPI_SSOEConfig ( SPI_RegDef_t * pSPIx, uint8_t ENorDi );


 /*
 * IRQ Configuration and ISR handling
 */

 void SPI_InterruptConfig( uint32_t IRQNumber, uint8_t EnorDi );																																	//used to configure IRQ number like enabling it, disabling, changing priority
 void SPI_IRQPriorityConfig( uint8_t IRQNumber, uint32_t IRQPriority );
 void SPI_IRQHandling(SPI_Handle_t *pHandle);

#endif

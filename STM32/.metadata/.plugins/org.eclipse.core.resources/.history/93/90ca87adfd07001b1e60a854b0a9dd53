
#include "usart_driver.h"



/*********************************************************************
 * @fn      		  - USART_SetBaudRate
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -

 */


void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{

	//Variable to hold the APB clock
	uint32_t PCLKx;

	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part,F_part;

  uint32_t tempreg=0;

  //Get the value of APB bus clock in to the variable PCLKx
  if(pUSARTx == USART1 || pUSARTx == USART6)
  {
	   //USART1 and USART6 are hanging on APB2 bus
	   PCLKx = RCC_GetPCLK2Value();
  }else
  {
	   PCLKx = RCC_GetPCLK1Value();
  }

  //Check for OVER8 configuration bit
  if(pUSARTx->CR1 & (1 << USART_CR1_OVER8))
  {
	   //OVER8 = 1 , over sampling by 8
	   usartdiv = ((25 * PCLKx) / (2 *BaudRate));
  }else
  {
	   //over sampling by 16
	   usartdiv = ((25 * PCLKx) / (4 *BaudRate));
  }

  //Calculate the Mantissa part
  M_part = usartdiv/100;

  //Place the Mantissa part in appropriate bit position . refer USART_BRR
  tempreg |= M_part << 4;

  //Extract the fraction part
  F_part = (usartdiv - (M_part * 100));

  //Calculate the final fractional
  if(pUSARTx->CR1 & ( 1 << USART_CR1_OVER8))
   {
	  //OVER8 = 1 , over sampling by 8
	  F_part = ((( F_part * 8)+ 50) / 100)& ((uint8_t)0x07);

   }else
   {
	   //over sampling by 16
	   F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);

   }

  //Place the fractional part in appropriate bit position . refer USART_BRR
  tempreg |= F_part;

  //copy the value of tempreg in to BRR register
  pUSARTx->BRR = tempreg;
}


/*********************************************************************
 * @fn      		  		- USART_Init
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -

 */

void USART_Init (	USART_Handle_t *pUSARTHandle	)
{
		uint32_t temp = 0;

	/******************************** Configuration of CR1******************************************/

		// USART Clock enable
		USART_PeriClockControl ( pUSARTHandle->pUSARTx, ENABLE );

		//USART Mode
		if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TX_ONLY )
		{
				temp |= ( 1 << USART_CR1_TE );
		}
		else if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_RX_ONLY )
		{
				temp |= ( 1 << USART_CR1_RE );
		}
		else if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX_ONLY )
		{
				temp |= ( 1 << USART_CR1_RE ) | ( 1 << USART_CR1_TE );
		}

		//USART Word Length
		if ( pUSARTHandle->USART_Config.USART_WorldLength == USART_WORDLEN_8BITS )
		{
				temp &= ~( 1 << USART_CR1_M );
		}
		else if ( pUSARTHandle->USART_Config.USART_WorldLength == USART_WORDLEN_9BITS )
		{
				temp |= ( 1 << USART_CR1_M );
		}

		//USART Parity Control
		temp |= ( 1 << USART_CR1_PCE );									//Parity Enable
		temp |= ( pUSARTHandle->USART_Config.USART_ParityControl << USART_CR1_PS );


		//Programming CR1 register
		pUSARTHandle->pUSARTx->CR1 |= temp;

		/******************************** Configuration of CR2******************************************/

		temp = 0;

		//configuring the number of stop bits inserted during USART frame transmission
		temp |= ( pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP ) ;

		//Programming the CR2 register
		pUSARTHandle->pUSARTx->CR2 |= temp;

		/******************************** Configuration of CR3******************************************/

		temp = 0;

		if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS )
		{
				temp |= ( 1 << USART_CR3_RTSE );
		}
		else if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS )
		{
				temp |= ( 1 << USART_CR3_CTSE );
		}
		else if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS )
		{
				temp |= ( 1 << USART_CR3_CTSE );
				temp |= ( 1 << USART_CR3_RTSE );
		}

		//Programming the CR3 register
		pUSARTHandle->pUSARTx->CR3 |= temp;

	/******************************** Configuration of BRR(Baud rate register)******************************************/
	USART_SetBaudRate( pUSARTHandle->pUSARTx, pUSARTHandle->USART_Config.USART_Baud );
}

/*********************************************************************
 * @fn      		  		- USART_DeInit
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -

 */

void USART_DeInit ( USART_RegDef_t * pUSARTx )
{
	if ( pUSARTx == USART1 )
			{
				RCC->APB2RSTR |= ( 1 << 4 );
				RCC->APB2RSTR &= ~( 1 << 4 );
			}
			else if ( pUSARTx == USART2 )
			{
				RCC->APB1RSTR |= ( 1 << 17 );
	   			RCC->APB1RSTR &= ~( 1 << 17 );
			}
			else if ( pUSARTx == USART3 )
			{
				RCC->APB1RSTR |= ( 1 << 18 );
				RCC->APB1RSTR &= ~( 1 << 18 );
			}
			else if ( pUSARTx == UART4 )
			{
				RCC->APB1RSTR |= ( 1 << 19 );
				RCC->APB1RSTR &= ~( 1 << 19 );
			}
			else if ( pUSARTx == UART5 )
			{
				RCC->APB1RSTR |= ( 1 << 20 );
				RCC->APB1RSTR &= ~( 1 << 20 );
			}
			else if ( pUSARTx == USART6 )
			{
				RCC->APB2RSTR |= ( 1 << 5 );
				RCC->APB2RSTR &= ~( 1 << 5 );
			}
}

/*********************************************************************
 * @fn      		  -USART_PeripheralControl
 *
 * @brief             - USART ENABLE or DISABLE
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -

 */


void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnOrDi)
{
	if ( EnOrDi == ENABLE )
	{
		pUSARTx->CR1 |= ( 1 << USART_CR1_UE );
	}
	else
	{
		pUSARTx->CR1 &= ~( 1 << USART_CR1_UE );
	}
}


/*********************************************************************
 * @fn      		  		- USART_PeriClockControl
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -

 */

void USART_PeriClockControl ( USART_RegDef_t * pUSARTx, uint8_t EnorDi )
{
	if ( EnorDi == ENABLE )
			{
					if ( pUSARTx == USART1 )
					{
							RCC->APB2ENR |= ( 1 << 4 );
					}
					else if ( pUSARTx == USART2 )
					{
							RCC->APB1ENR |= ( 1 << 17 );
					}
					else if ( pUSARTx == USART3 )
					{
							RCC->APB1ENR |= ( 1 << 18 );
					}
							else if ( pUSARTx == UART4 )
					{
							RCC->APB1ENR |= ( 1 << 19 );
					}
					else if ( pUSARTx == UART5 )
					{
							RCC->APB1ENR |= ( 1 << 20 );
					}
					else if ( pUSARTx == USART6 )
					{
							RCC->APB2ENR |= ( 1 << 5 );
					}
			}
			else
			{
					if ( pUSARTx == USART1 )
					{
							USART1_PCLK_DI();
					}
					else if ( pUSARTx == USART2 )
					{
							USART2_PCLK_DI();
					}
					else if ( pUSARTx == USART3 )
					{
							USART3_PCLK_DI();
					}
							else if ( pUSARTx == UART4 )
					{
							UART4_PCLK_DI();
					}
					else if ( pUSARTx == UART5 )
					{
							UART5_PCLK_DI();
					}
					else if ( pUSARTx == USART6 )
					{
							USART6_PCLK_DI();
					}
			}
}

/*********************************************************************
 * @fn      		  - USART_GetFlagStatus
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            - weather that flag is enable or not
 *
 * @Note              - flagName is masking detail of corresponding flags

 */

uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx , uint32_t FlagName)
{
	if ( pUSARTx->SR & FlagName )
	{
		return FLAG_SET;
	}
	return FLAG_RESET;
}

/*********************************************************************
 * @fn      		  - USART_SendData
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         - Len is number of bytes
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -
 */

void USART_SendData ( USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len  )
{
	uint16_t *pdata;																	/*since our pTxBuffer is of 8 bits, so it will not be able to store 9 bits in it (which will be useful in 9bits word length),

	//Loop over until "Len" number of bytes are transferred											  	  	  	  	  	  	  	  	  	  	  type casting it to 16bits, so now we can extract 9 bits by this 16 bits (2 byte) */
	while ( Len > 0)
	{
		//wait until TXE flag is set in the SR
		while ( !USART_GetFlagStatus( pUSARTHandle->pUSARTx, USART_SR_TXE ) );

		//Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if ( pUSARTHandle->USART_Config.USART_WorldLength == USART_WORDLEN_9BITS )
		{
			//if 9BIT load the DR with 2bytes masking  the bits other than first 9 bits

			//here challenge is we are having 8 bit buffer ( ie pTxBuffer), but we want to send 9 bits data, for this we are helper pointer pdata
			pdata = (uint16_t *)pTxBuffer;
			pUSARTHandle->pUSARTx->DR = ( *pdata & (uint16_t)0x01FF );
			//pTxBuffer = ( pTxBuffer >> 1 );

			if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE )
			{
				//check for USART_ParityControl

				//No parity is used in this transfer , so 9bits of user data will be sent, so 16 bits of helper variable is used for transmitting it
				//if parity is enabled, hardware automatically adds parity bit after 8 bits of data. therefore 9th bit to send is Parity bit
				pTxBuffer++;
				pTxBuffer++;
			}
			else
			{
				//Parity bit is used in this transfer . so 8bits of user data will be sent
				//The 9th bit will be replaced by parity bit by the hardware, our DR[8:0] is of 9 bits so here DR[8] will be controlled by Hardware.
				pTxBuffer++;
			}

		}
		else
		{
			//This is 8bit data transfer
			pUSARTHandle->pUSARTx->DR = (*pTxBuffer );

			//code to increment the buffer address
			pTxBuffer++;
		}
		Len--;
	}

	//wait till TC flag is set in the SR, ie wait till Transmission is complete
	/*TC bit is set by hardware if the transmission of a frame containing data is complete and if
	 TXE is set.*/
	while ( !USART_GetFlagStatus( pUSARTHandle->pUSARTx, USART_TC_FLAG) );
}

/*********************************************************************
 * @fn      		  - USART_ReceiveData
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -
 */

void USART_ReceiveData(USART_Handle_t *pUSARTHandle, uint8_t *pRxBuffer, uint32_t Len)
{
	//Loop over until "Len" number of bytes are transferred
	while ( Len > 0 )
	{
		//wait until RXNE flag is set in the SR
		while ( !USART_GetFlagStatus( pUSARTHandle->pUSARTx->DR, USART_RXNE_FLAG ) );

		//Check the USART_WordLength to decide whether we are going to receive 9bit of data in a frame or 8 bit
		if ( pUSARTHandle->USART_Config.USART_WorldLength == USART_WORDLEN_9BITS  )
		{
			//9bit data in a frame

			//checking USART_ParityControl control or not
			if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE )
			{
				//No parity is used , so all 9bits will be of user data

				//read only first 9 bits so masking the DR with 0x01FF
				*((uint16_t*) pRxBuffer) = (pUSARTHandle->pUSARTx->DR  & (uint16_t)0x01FF);
				pRxBuffer++;
				pRxBuffer++;
			}
			else
			{
				//Parity is used, so 8bits will be of user data and 1 bit is parity, our DR[8:0] is of 9 bits so here DR[8] will be Parity received (Parity bit).
				*(pRxBuffer) = ( pUSARTHandle->pUSARTx->DR & (uint8_t)0xFF );
				pRxBuffer++;
			}
		}
		else
		{
			//We are going to receive 8bit data in a frame

			//checking using USART_ParityControl control or not
			if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE )
			{
				//No parity is used , so all 8bits will be of user data

				//read 8 bits from DR
				pRxBuffer = ( pUSARTHandle->pUSARTx->DR & (uint8_t)0xFF );
			}
			else
			{
				//Parity is used, so , 7 bits will be of user data and 1 bit is parity

				//read only 7 bits, hence mask the DR with 0X7F
				*pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0x7F);
			}
			//Now , increment the pRxBuffer
			pRxBuffer++;
		}
		Len--;
	}
}

/*********************************************************************
 * @fn      		  - USART_SendDataWithIT
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -
 */

uint8_t USART_SendDataIT(USART_Handle_t *pUSARTHandle,uint8_t *pTxBuffer, uint32_t Len)
{
	uint32_t txstate = pUSARTHandle->TxBusyState;

	if ( txstate != USART_BUSY_IN_TX )
	{
		//Remember all the states and required information, so that they can be used in ISR
		pUSARTHandle->pTxBuffer = pTxBuffer;
		pUSARTHandle->TxLen = Len;
		pUSARTHandle->TxBusyState = USART_BUSY_IN_TX;

		//enable interrupt for TXE
		pUSARTHandle->pUSARTx->CR1 |= ( 1 << USART_CR1_TXEIE );

		//enable interrupt for TC, ie Transmission complete interrupt enable
		pUSARTHandle->pUSARTx->CR1 |= ( 1 << USART_CR1_TCIE );
	}

	return txstate;
}

/*********************************************************************
 * @fn      		  - USART_ReceiveDataWithIT
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -
 */

uint8_t USART_ReceiveDataIT(USART_Handle_t *pUSARTHandle,uint8_t *pRxBuffer, uint32_t Len)
{
	uint8_t rxstate = pUSARTHandle->RxBusyState;

	if ( rxstate != USART_BUSY_IN_RX )
	{
		pUSARTHandle->pRxBuffer = pRxBuffer;
		pUSARTHandle->RxLen = Len;
		pUSARTHandle->RxBusyState = USART_BUSY_IN_RX;

		(void)pUSARTHandle->pUSARTx->DR;

		//enable interrupt for RXNE (receive buffer not empty)
		pUSARTHandle->pUSARTx->CR1 |= ( 1 << USART_CR1_RXNEIE );
	}

	return rxstate;

}


/*********************************************************************
 * @fn      		  - USART_ClearFlag
 *
 * @brief             -
 *
 * @param[in]         - FlagName is masking detail of flag to be cleared
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -

 */

void USART_ClearFlag(USART_RegDef_t *pUSARTx, uint16_t StatusFlagName)
{
	pUSARTx->SR &= ~ ( StatusFlagName );
}

/*********************************************************************
 * @fn      		  - USART_InterruptConfig
 *
 * @brief             - processor specific API
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              - This API will be same for every peripheral, because it has nothing to do with peripheral,
 * 						it just need irq number, and it will enable or disable it whatever peripheral is connected
 * 						to NVIC at that position
 */

void USART_InterruptConfig( uint32_t IRQNumber, uint8_t EnorDi )						//used to configure IRQ number like enabling it, disabling in processor side ie in NVIC block.
{
		//configuring NVIC related registers, or configuring processor registers
		if( EnorDi == ENABLE )
		{
			if ( IRQNumber <= 31 )
			{
					//program ISER0 register
					*NVIC_ISER0 |= ( 1 << IRQNumber ) ;								//Interrupt set Eable register
			}
			else if ( IRQNumber >= 32 && IRQNumber <= 63 )
			{
					//program ISER1 register
				  *NVIC_ISER1 |= ( 1 << IRQNumber%32 ) ;									// %32 is make 32 - 63 in the range of 0 - 31
			}
			else if ( IRQNumber >= 64 && IRQNumber <= 95 )
			{
					//program ISER2 register
			  		*NVIC_ISER2 |= ( 1 << IRQNumber%64 ) ;									// %64 is make 64 - 95 in the range of 0 - 31
			}
		}
		else if( EnorDi == DISABLE )
		{
			if ( IRQNumber <= 31 )
			{
					//program ISER0 register
					*NVIC_ICER0 |= ( 1 << IRQNumber ) ;								//Interrupt clear Eable register
			}
			else if ( IRQNumber >= 32 && IRQNumber <= 63 )
			{
					//program ISER1 register
				  *NVIC_ICER1 |= ( 1 << IRQNumber%32 ) ;									// %32 is make 32 - 63 in the range of 0 - 31
			}
			else if ( IRQNumber >= 64 && IRQNumber <= 95 )
			{
					//program ISER2 register
			  	*NVIC_ICER2 |= ( 1 << IRQNumber%64 ) ;									// %64 is make 64 - 95 in the range of 0 - 31
			}
		}
}

/*********************************************************************
 * @fn      		  - USART_IRQPriorityConfig
 *
 * @brief             - processor specific API
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              - This API will be same for every peripheral, because it has nothing to do with peripheral,
 * 						it just need irq number, and priority and it will change it, whatever peripheral is connected
 * 					    to NVIC at that position
 */

void USART_IRQPriorityConfig( uint8_t IRQNumber, uint32_t IRQPriority )
{
		uint8_t reg_number = IRQPriority / 4 ;																	// it tells in which NVIC Priority register we have to use
		uint8_t reg_section = IRQPriority % 4 ; 																// it tells which in bit of a NVIC Priority register we have to use

		uint8_t shifting_amount = 8 * reg_section + ( 8 - NO_PR_BITS_IMPLEMENTED ) ;
		*( NVIC_IPR_BASEADDR + reg_number ) |= ( IRQPriority << shifting_amount ) ;					//lower 4 bits are not implemented in each and every field of this register, therefore we have shift by additional 4 amount
																																												//note: above
}


/*********************************************************************
 * @fn      		  - USART_IRQHandling
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -

 */

void USART_IRQHandling(USART_Handle_t *pHandle)
{

}

/*********************************************************************
 * @fn      		  - USART_ApplicationEventCallback
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -
 */
__weak void USART_ApplicationEventCallback(USART_Handle_t *pUSARTHandle,uint8_t event)
{

}
